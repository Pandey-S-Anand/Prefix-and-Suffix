//Bruteforce Approach

class Solution {
    public int[] getSumAbsoluteDifferences(int[] arr) {
        int[] result = new int[arr.length];
        int index = 0;

        for (int val1 : arr) {
            for (int val2 : arr) {
                result[index] += Math.abs(val1 - val2);
            }
            index++;
        }

        return result;
    }
}

//Aliter

class Solution {
    public int[] getSumAbsoluteDifferences(int[] arr) {
        int[] result = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if (i != j) {
                    result[i] += Math.abs(arr[i] - arr[j]);
                }
            }
        }

        return result;
    }
}



/*Optimal Approach :

let length=arr.length
for every element(i.e arr[i]),the absolute difference is :

=> |arr[i]-arr[0]|+|arr[i]-arr[1]|+.......+|arr[i]-arr[i-1]|+|arr[i]-arr[i]|+|arr[i]-arr[i+1]|+...........+|arr[i]-arr[length-2]|+|arr[i]-arr[length-1]|

=> (arr[i]-arr[0])+(arr[i]-arr[1])+.......+(arr[i]-arr[i-1])+(arr[i]-arr[i])+(arr[i+1]-arr[i])+...........+(arr[length-2]-arr[i])+(arr[length-1]-arr[i]) 

=> (arr[i]-arr[0])+(arr[i]-arr[1])+....... +(arr[i]-arr[i-1])+ 0 +(arr[i+1]-arr[i])+...........+(arr[length-2]-arr[i])+(arr[length-1]-arr[i]) 

=> (arr[i]*i - (arr[0]+arr[1]+...arr[i-1])) + ((arr[i+1]+arr[i+2]+....arr[length-1]) - arr[i]*(length-1-i))

=> ((arr[i]*i) - prefixsum[i]) + (postfixsum[i] - (arr[i]*(length-1-i)))

Note :

in Expression : "arr[i]*i" 'i' is the count of arr[i] to the left of arr[i].

Similarly,

in Expression : "arr[i]*(length-1-i)" '(length-1-i)' is the count of arr[i] to the right of arr[i].
*/


//Intuitive Implementation

class Solution {
    public int[] getSumAbsoluteDifferences(int[] arr) {
        int[] result = new int[arr.length];
        int prefixSum[] = new int[arr.length];
        int postfixSum[] = new int[arr.length];

        for (int i = 1; i < arr.length; i++) { // prefixSum[0]=0
            prefixSum[i] = prefixSum[i - 1] + arr[i - 1];
        }

        for (int i = arr.length - 2; i >= 0; i--) { // postfixSum[n-1]=0
            postfixSum[i] = postfixSum[i + 1] + arr[i + 1];
        }

        for (int i = 0; i < arr.length; i++) {
            result[i] = (arr[i] * i) - prefixSum[i] + postfixSum[i] - (arr[i] * (arr.length - 1 - i));
        }

        return result;
    }
}


/*
Optimisation :

let length=arr.length

we know :

prefixSum[i]= (arr[0]+arr[1]+...arr[i-1]);
and
postfixsum[i]=(arr[i+1]+arr[i+2]+....arr[length-1])

(arr[i+1]+arr[i+2]+....arr[length-1] = (arr[0]+arr[1]+...arr[length-1]) - (arr[0]+arr[1]+...arr[i-1]) -arr[i] = arraySum-prefixSum[i]-arr[i];

thus, postfixSum[i]= arraySum - prefixSum[i] - arr[i];

*/

//Optimal Implementation

class Solution {
    public int[] getSumAbsoluteDifferences(int[] arr) {
        int[] result = new int[arr.length];
        int prefixSum[] = new int[arr.length];
        int arrSum = arr[0];

        for (int i = 1; i < arr.length; i++) { // prefixSum[0]=0
            arrSum += arr[i];
            prefixSum[i] = prefixSum[i - 1] + arr[i - 1];
        }

        for (int i = 0; i < arr.length; i++) {
            result[i] = (arr[i] * i) - prefixSum[i] + (arrSum - prefixSum[i] - arr[i]) - (arr[i] * (arr.length - 1 - i));
        }

        return result;
    }
}
