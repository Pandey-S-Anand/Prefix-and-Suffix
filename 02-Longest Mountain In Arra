/*
The first and last elements are skipped because a valid mountain requires both
an increasing part and a decreasing part around a peak, and the first/last elements
cannot have both neighbors to form a valid peak.
*/

//Bruteforce approach

class Solution {
    public int longestMountain(int[] arr) {
        if (arr.length < 3) {
            return 0;
        }

        int longestBitonicSubarray = 0;

        for (int i = 1; i < arr.length - 1; i++) {
            // Check for the length of the longest strictly increasing subarray ending at index 'i'.
            int lis = longestIncreasingSubarray(arr, i);
            // Check for the length of the longest strictly decreasing subarray starting at index 'i'.
            int lds = longestDecreasingSubarray(arr, i);

            /*
             * For a valid mountain (bitonic subarray), there must be both an increasing phase and a
             * decreasing phase. If either the increasing or decreasing length is 1, it means there is no valid
             * transition between the increasing and decreasing phases. This indicates that the current subarray
             * is not a valid mountain.
             */

            if (lis == 1 || lds == 1) {
                continue;
            }
            /*
             * Calculate the total length of the bitonic (mountain) subarray:
             * Total length = length of increasing + length of decreasing - 1 (to avoid double counting the peak element).
             */
            longestBitonicSubarray = Math.max(longestBitonicSubarray, lis + lds - 1);
        }

        return longestBitonicSubarray;
    }

    private int longestIncreasingSubarray(int[] arr, int index) {
        int length = 1; // Start with length 1 as the current element is always part of the increasing subarray.

        for (int i = index - 1; i >= 0; i--) {
            if (arr[i] >= arr[i + 1]) {
                break;
            }

            length++;
        }

        return length;
    }

    private int longestDecreasingSubarray(int[] arr, int index) {
        int length = 1; // Start with length 1 as the current element is always part of the decreasing subarray.

        for (int i = index + 1; i < arr.length; i++) {
            if (arr[i] >= arr[i - 1]) {
                break;
            }

            length++;
        }

        return length;
    }
}


//Improved approach

class Solution {
    public int longestMountain(int[] arr) {
        if (arr.length < 3) {
            return 0;
        }

        int longestBitonicSubarray = 0;

        for (int i = 1; i < arr.length - 1; i++) {
            // Only proceed if 'i' is a potential peak (i.e., greater than both neighbors).
            if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
                int lis = longestIncreasingSubarray(arr, i);
                int lds = longestDecreasingSubarray(arr, i);
                longestBitonicSubarray = Math.max(longestBitonicSubarray, lis + lds - 1);
            }
        }

        return longestBitonicSubarray;
    }

    private int longestIncreasingSubarray(int[] arr, int index) {
        int length = 1;

        for (int i = index - 1; i >= 0; i--) {
            if (arr[i] >= arr[i + 1]) {
                break;
            }

            length++;
        }

        return length;
    }

    private int longestDecreasingSubarray(int[] arr, int index) {
        int length = 1;

        for (int i = index + 1; i < arr.length; i++) {
            if (arr[i] >= arr[i - 1]) {
                break;
            }

            length++;
        }

        return length;
    }
}


//Better approach

class Solution {
    public int longestMountain(int[] arr) {
        if (arr.length < 3) {
            return 0;
        }

        int longestBitonicSubarray = 0;

        int[] lis = longestIncreasingSubarray(arr);
        int[] lds = longestDecreasingSubarray(arr);

        for (int i = 1; i < arr.length - 1; i++) {
            if (lis[i] > 1 && lds[i] > 1) {
                longestBitonicSubarray = Math.max(longestBitonicSubarray, lis[i] + lds[i] - 1);
            }
        }

        return longestBitonicSubarray;
    }

    private int[] longestIncreasingSubarray(int[] arr) {
        // lis[i] stores the length of the longest increasing subarray ending at i.
        int[] lis = new int[arr.length];
        lis[0] = 1;

        for (int i = 1; i < arr.length - 1; i++) {
            lis[i] = 1;
            if (arr[i] > arr[i - 1]) {
                lis[i] += lis[i - 1];
            }
        }

        return lis;
    }

    private int[] longestDecreasingSubarray(int[] arr) {
        // lis[i] stores the length of the longest decreasing subarray starting at i.
        int[] lds = new int[arr.length];
        lds[arr.length - 1] = 1;

        for (int i = arr.length - 2; i > 0; i--) {
            lds[i] = 1;
            if (arr[i] > arr[i + 1]) {
                lds[i] += lds[i + 1];
            }
        }

        return lds;
    }
}


//Optimised Approach Approach

class Solution {
    public int longestMountain(int[] arr) {
        if (arr.length < 3) {
            return 0;
        }

        int longestBitonicSubarray = 0;

        int[] lds = longestDecreasingSubarray(arr);
        int lisLength = 1; // longest increasing subarray ending at index 0
        
        for (int i = 1; i < arr.length - 1; i++) {
            // Update lisLength to reflect the longest increasing subarray ending at i
            if (arr[i] > arr[i - 1]) {
                lisLength++;
            } else {
                lisLength = 1; // Reset increasing subarray length to 1 if sequence breaks
            }

            if (lisLength > 1 && lds[i] > 1) {
                longestBitonicSubarray = Math.max(longestBitonicSubarray, lisLength + lds[i] - 1);
            }
        }

        return longestBitonicSubarray;
    }

    private int[] longestDecreasingSubarray(int[] arr) {
        // lis[i] stores the length of the longest decreasing subarray starting at i.
        int[] lds = new int[arr.length];
        lds[arr.length - 1] = 1;

        for (int i = arr.length - 2; i > 0; i--) {
            lds[i] = 1;
            if (arr[i] > arr[i + 1]) {
                lds[i] += lds[i + 1];
            }
        }

        return lds;
    }
}
